/*
 * Wazuh SyscollectorNormalizer
 * Copyright (C) 2015, Wazuh Inc.
 * September 8, 2023.
 *
 * This program is free software; you can redistribute it
 * and/or modify it under the terms of the GNU General Public
 * License (version 2) as published by the FSF - Free Software
 * Foundation.
 */
#include "policyManager_test.h"

void PolManagerTest::SetUp()
{
    m_policyManager = std::make_unique<PolicyManager>();
};

void PolManagerTest::TearDown() {};

TEST_F(PolManagerTest, validConfigVD)
{
    const auto& configJson {nlohmann::json::parse(R"({
  "vulnerability-detection": {
    "enabled": "yes",
    "index-status": "yes",
    "feed-update-interval": "60m",
    "offline-url": "file:///var/algo.tar.gz"
  },
  "indexer": {
    "enabled": "yes",
    "hosts": ["http://10.2.20.2:9200", "https://10.2.20.42:9200"],
    "username": "user",
    "password": "pwd",
    "api_key": "",
    "ssl": {
      "certificate_authorities": ["/var/ossec/"],
      "certificate": "cert",
      "key": ""
    }
  }
})")};
    EXPECT_NO_THROW(m_policyManager->validateAndConfigureVulnerabilityDetection(configJson));
}

TEST_F(PolManagerTest, validConfigId)
{
    const auto& configJson {nlohmann::json::parse(R"({
  "vulnerability-detection": {
    "enabled": "yes",
    "index-status": "yes",
    "feed-update-interval": "60m",
    "offline-url": "file:///var/algo.tar.gz"
  },
  "indexer": {
    "enabled": "yes",
    "hosts": ["http://10.2.20.2:9200", "https://10.2.20.42:9200"],
    "username": "user",
    "password": "pwd",
    "api_key": "",
    "ssl": {
      "certificate_authorities": ["/var/ossec/"],
      "certificate": "cert",
      "key": ""
    }
  }
})")};
    EXPECT_NO_THROW(m_policyManager->validateAndConfigureIndexer(configJson));
}

TEST_F(PolManagerTest, missingVD)
{
    const auto& configJson {nlohmann::json::parse(R"({
  "vulnerability-detection": {
    "enable": "yes",
    "index-status": "yes",
    "feed-update-interval": "60m",
    "offline-url": "file:///var/algo.tar.gz"
  },
  "indexer": {
    "enabled": "yes",
    "hosts": ["http://10.2.20.2:9200", "https://10.2.20.42:9200"],
    "username": "user",
    "password": "pwd",
    "api_key": "",
    "ssl": {
      "certificate_authorities": ["/var/ossec/"],
      "certificate": "cert",
      "key": ""
    }
  }
})")};
    EXPECT_THROW(m_policyManager->validateAndConfigureVulnerabilityDetection(configJson), std::runtime_error);
}

TEST_F(PolManagerTest, missingIdStatus)
{
    const auto& configJson {nlohmann::json::parse(R"({
  "vulnerability-detection": {
    "enabled": "yes",
    "index-statu": "yes",
    "feed-update-interval": "60m",
    "offline-url": "file:///var/algo.tar.gz"
  },
  "indexer": {
    "enabled": "yes",
    "hosts": ["http://10.2.20.2:9200", "https://10.2.20.42:9200"],
    "username": "user",
    "password": "pwd",
    "api_key": "",
    "ssl": {
      "certificate_authorities": ["/var/ossec/"],
      "certificate": "cert",
      "key": ""
    }
  }
})")};
    EXPECT_THROW(m_policyManager->validateAndConfigureVulnerabilityDetection(configJson), std::runtime_error);
}

TEST_F(PolManagerTest, invalidConfig)
{
    const auto& configJson {nlohmann::json::parse(R"({
  "vulnerability-detection": {
    "enabled": "yes",
    "index-status": "yes",
    "feed-update-interval": "60m",
    "offline-url": "file:///var/algo.tar.gz"
  },
  "indexer": {
    "enabled": "no",
    "hosts": ["http://10.2.20.2:9200", "https://10.2.20.42:9200"],
    "username": "user",
    "password": "pwd",
    "api_key": "",
    "ssl": {
      "certificate_authorities": ["/var/ossec/"],
      "certificate": "cert",
      "key": ""
    }
  }
})")};
    EXPECT_THROW(m_policyManager->validateAndConfigureIndexer(configJson), std::runtime_error);
}

TEST_F(PolManagerTest, missingEnabledId)
{
    const auto& configJson {nlohmann::json::parse(R"({
  "vulnerability-detection": {
    "enabled": "yes",
    "index-status": "yes",
    "feed-update-interval": "60m",
    "offline-url": "file:///var/algo.tar.gz"
  },
  "indexer": {
    "enable": "yes",
    "hosts": ["http://10.2.20.2:9200", "https://10.2.20.42:9200"],
    "username": "user",
    "password": "pwd",
    "api_key": "",
    "ssl": {
      "certificate_authorities": ["/var/ossec/"],
      "certificate": "cert",
      "key": ""
    }
  }
})")};
    EXPECT_THROW(m_policyManager->validateAndConfigureIndexer(configJson), std::runtime_error);
}
