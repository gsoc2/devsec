/*
 * Wazuh vulnerability scanner - Policy Manager
 * Copyright (C) 2015, Wazuh Inc.
 * March 25, 2023.
 *
 * This program is free software; you can redistribute it
 * and/or modify it under the terms of the GNU General Public
 * License (version 2) as published by the FSF - Free Software
 * Foundation.
 */

#ifndef _POLICY_MANAGER_HPP
#define _POLICY_MANAGER_HPP

#include "observer.hpp"
#include "routerSubscriber.hpp"
#include "singleton.hpp"
#include "stringHelper.h"
#include <external/nlohmann/json.hpp>
#include <functional>
#include <memory>
#include <string>
#include <unordered_set>
#include <vector>

/**
 * @brief PolicyManager class.
 *
 */

constexpr auto UNKNOWN_VALUE {" "};
class PolicyManager final : public Singleton<PolicyManager>
{
private:
    Subject<nlohmann::json&> m_subject;
    nlohmann::json m_configuration;
    std::unique_ptr<RouterSubscriber> m_policyChangeSubscription;
    bool m_vulDetectEnabled {true};
    bool m_indexerEnabled {true};
    bool m_vulDetectValid {true};
    bool m_indexerValid {true};
    long m_feedUpdateTime {300};
    std::string m_urlFeed {UNKNOWN_VALUE};
    std::unordered_set<std::string> m_hostList;
    std::unordered_set<std::string> m_caList;
    std::string m_username {UNKNOWN_VALUE};
    std::string m_password {UNKNOWN_VALUE};
    std::string m_certificate {UNKNOWN_VALUE};
    std::string m_key {UNKNOWN_VALUE};

    void setDefaultPolicy()
    {
        // Set default policy
        if (!m_configuration.contains("updater"))
        {
            m_configuration["updater"] = nlohmann::json::object();
            m_configuration["updater"]["interval"] = 10 * 60;
            m_configuration["updater"]["ondemand"] = true;
            m_configuration["updater"]["topicName"] = "vulnerability_scanner_updater";
            m_configuration["updater"]["configData"] = nlohmann::json::object();
            m_configuration["updater"]["configData"]["contentSource"] = "api";
            m_configuration["updater"]["configData"]["compressionType"] = "raw";
            m_configuration["updater"]["configData"]["versionedContent"] = "false";
            m_configuration["updater"]["configData"]["deleteDownloadedContent"] = false;
            m_configuration["updater"]["configData"]["url"] = "https://swapi.dev/api/people/1";
            m_configuration["updater"]["configData"]["outputFolder"] = "";
            m_configuration["updater"]["configData"]["dataFormat"] = "json";
            m_configuration["updater"]["configData"]["fileName"] = "api_file.json";
            m_configuration["updater"]["configData"]["apiParameters"] = nlohmann::json::object();
            m_configuration["updater"]["configData"]["apiParameters"]["itemsPerRequest"] = nlohmann::json::object();
            m_configuration["updater"]["configData"]["apiParameters"]["itemsPerRequest"]["name"] = "limit";
            m_configuration["updater"]["configData"]["apiParameters"]["itemsPerRequest"]["value"] = 100;
            m_configuration["updater"]["configData"]["apiParameters"]["offset"] = nlohmann::json::object();
            m_configuration["updater"]["configData"]["apiParameters"]["offset"]["name"] = "offset";
            m_configuration["updater"]["configData"]["apiParameters"]["offset"]["step"] = 100;
            m_configuration["updater"]["configData"]["apiParameters"]["offset"]["start"] = 0;
        }

        if (!m_configuration.contains("exclusions"))
        {
            m_configuration["exclusions"] = nlohmann::json::object();
            m_configuration["exclusions"]["packages"] = nlohmann::json::array();
        }

        if (!m_configuration.contains("indexer"))
        {
            m_configuration["indexer"] = nlohmann::json::object();
            m_configuration["indexer"]["servers"] = nlohmann::json::array();
            m_configuration["indexer"]["servers"].push_back("http://localhost:9200");
            m_configuration["indexer"]["databasePath"] = "queue/indexer_vd";
        }
    }
    void call(nlohmann::json& data)
    {
        m_subject.setData(data);
    }

public:
    /**
     * @brief Initializes manager.
     *
     * @param configuration Manager configuration.
     */
    void initialize(const nlohmann::json& configuration)
    {
        m_configuration = configuration;

        setDefaultPolicy();

        // Subscription to policy change events.
        m_policyChangeSubscription = std::make_unique<RouterSubscriber>("policy", "vulnerability_scanner");
        m_policyChangeSubscription->subscribe(
            [this](const std::vector<char>& message)
            {
                m_configuration = nlohmann::json::parse(message);
                setDefaultPolicy();
                call(m_configuration);
            });
    }

    void validateConfiguration()
    {
        for (auto it = m_configuration.begin(); it != m_configuration.end(); it++)
        {
            if (it.key().compare("vulnerabilty-detection"))
            {
                validateAndConfigureVulnerabilityDetection(*it);
            }
            else if (it.key().compare("indexer"))
            {
                validateAndConfigureIndexer(*it);
            }
            else
            {
                throw std::runtime_error("Invalid JSON object.");
            }
        }
    }

    /**
     * @brief Validates and configures the vulnerability detection based on the provided JSON object.
     *
     * This function takes a JSON object as input, which is expected to contain configuration
     * information for an vulnerability detection. It validates the JSON object to ensure it contains the
     * required fields and has valid values.
     * If the validation passes, no exception is throw.
     *
     * @param vdObj A constant reference to a JSON object representing the vulnerability detection's configuration.
     *
     * @note This function assumes that the provided JSON object follows a specific format.
     * @note If validation fails, this function throw exceptions.
     *
     */

    void validateAndConfigureVulnerabilityDetection(const nlohmann::json& vdObj)
    {
        bool isValidUrl;

        if (!vdObj["vulnerability-detection"].contains("enabled"))
        {
            throw std::runtime_error("Missing enabled field.");
        }

        if (!vdObj["vulnerability-detection"].contains("index-status"))
        {
            throw std::runtime_error("Missing index-status field.");
        }

        if (vdObj["vulnerability-detection"].contains("feed-update-interval"))
        {
            m_feedUpdateTime = Utils::parseStrToTime(vdObj["vulnerability-detection"]["feed-update-interval"]);
        }

        if (vdObj["vulnerability-detection"].contains("offline-url"))
        {
            isValidUrl = Utils::startsWith(vdObj["vulnerability-detection"]["offline-url"], "file") ||
                         Utils::startsWith(vdObj["offline-url"], "https") ||
                         Utils::startsWith(vdObj["offline-url"], "https");
        }

        m_vulDetectEnabled = m_vulDetectEnabled && Utils::parseStrToBool(vdObj["vulnerability-detection"]["enabled"]);

        m_indexerEnabled = m_indexerEnabled && Utils::parseStrToBool(vdObj["vulnerability-detection"]["index-status"]);

        if (isValidUrl)
        {
            m_urlFeed = std::move(vdObj["vulnerability-detection"].contains("offline-url"));
        }
    }

    /**
     * @brief Validates and configures the indexer based on the provided JSON object.
     *
     * This function takes a JSON object as input, which is expected to contain configuration
     * information for an indexer. It validates the JSON object to ensure it contains the
     * required fields and has valid values, and based of the previous configuration of the vulnerability detection.
     * If the validation passes, no exception is throw.
     *
     * @param idObj A constant reference to a JSON object representing the indexer's configuration.
     *
     * @note This function assumes that the provided JSON object follows a specific format.
     * @note If validation fails, this function throw exceptions.
     *
     */

    void validateAndConfigureIndexer(const nlohmann::json& idObj)
    {
        if (!idObj["indexer"].contains("enabled"))
        {
            throw std::runtime_error("Missing enabled field.");
        }

        if (!Utils::parseStrToBool(idObj["indexer"]["enabled"]) && m_indexerEnabled)
        {
            throw std::runtime_error("Invalid configuration.");
        }

        if (idObj["indexer"].contains("hosts"))
        {
            m_hostList = idObj["indexer"]["hosts"].get<std::unordered_set<std::string>>();
        }

        if (idObj["indexer"].contains("username"))
        {
            m_username = std::move(idObj["indexer"]["username"]);
        }

        if (idObj["indexer"].contains("password"))
        {
            m_password = std::move(idObj["indexer"]["password"]);
        }

        if (idObj["indexer"].contains("ssl") && idObj["indexer"]["ssl"].contains("certificate_authorities"))
        {
            m_caList = idObj["indexer"]["ssl"]["certificate_authorities"].get<std::unordered_set<std::string>>();
        }

        if (idObj["indexer"].contains("ssl") && idObj["indexer"]["ssl"].contains("certificate"))
        {
            m_password = std::move(idObj["indexer"]["ssl"]["certificate"]);
        }

        if (idObj["indexer"].contains("ssl") && idObj["indexer"]["ssl"].contains("key"))
        {
            m_password = std::move(idObj["indexer"]["ssl"]["key"]);
        }
    }

    /**
     * @brief Adds subscriber.
     *
     * @param subscriber Subscriber to be added.
     */
    void addSubscriber(std::shared_ptr<Observer<nlohmann::json&>> subscriber)
    {
        m_subject.attach(subscriber);
    }

    /**
     * @brief Removes subscriber.
     *
     * @param observerId Observer ID.
     */
    void removeSubscriber(const std::string& observerId)
    {
        m_subject.detach(observerId);
    }

    /**
     * @brief Get updater configuration.
     *
     * @return nlohmann::json Configuration.
     */
    nlohmann::json getUpdaterConfiguration() const
    {
        return m_configuration.at("updater");
    }

    /**
     * @brief Get exclusions.
     *
     * @return nlohmann::json Exclusions configuration.
     */
    nlohmann::json getExclusions() const
    {
        return m_configuration.at("exclusions");
    }

    /**
     * @brief Get indexer connector configuration.
     *
     * @return nlohmann::json Connector configuration.
     */
    nlohmann::json getIndexerConfiguration() const
    {
        return m_configuration.at("indexer");
    }
};

#endif //_POLICY_MANAGER_HPP
