name: decoder/system-auth/0

parents:
  - decoder/syslog/0

metadata:
  module: system
  dataset: system-auth
  title: system-auth logs
  description: Decoder for system athenticated action logs.
  compatibility: This integration was tested with logs from OS like Ubuntu 20.04, Centos 7, and macOS Sierra.
  versions:
    - "any"
  author:
    name: Wazuh Inc.
    email: info@wazuh.com
    date: 2023-05-15
  references:
    - https://www.loggly.com/ultimate-guide/linux-logging-basics/

definitions:
  isAuthProcess: >-
    $process.name=="sshd"
    OR $process.name=="sudo"
    OR $process.name=="groupadd"
    OR $process.name=="useradd"
    OR $process.name=="groupdel"
    OR $process.name=="groupmod"
    OR $process.name=="userdel"
    OR $process.name=="usermod"
    OR $process.name=="CRON"

#TODO: Once the events arrive tagged, uncommnet following line and comment previous
#  isAuthProcess: >-
#    (process.name=="sshd"
#    OR process.name=="sudo"
#    OR process.name=="groupadd"
#    OR process.name=="useradd"
#    OR process.name=="groupdel"
#    OR process.name=="groupmod"
#    OR process.name=="userdel"
#    OR process.name=="usermod"
#    OR process.name=="CRON")
#    AND event.module=="system"

check: $isAuthProcess

normalize:
  - map:
      - event.dataset: system-auth
      - event.kind: event
      - event.module: system
      - event.outcome: success
      - wazuh.decoders: array_append(system-auth)

      - _empty: ""

  - check:
      - process.name: "sshd"
    parse|message:
      - <_system.auth.ssh.event> <_system.auth.ssh.method> for <user.name> from <source.ip> port <source.port> ssh2(?:<~>)
      - <_system.auth.ssh.event> user <user.name> from <source.ip>(? port <source.port>)
      - Did not receive identification string from <source.ip>
      - subsystem request for <_system.auth.ssh.subsystem> by user <user.name>
      - "<_system.auth.ssh.session.action>: Too many authentication <_system.auth.ssh.event> for <user.name> [preauth]"
      - "<user.name> [<~>][<~>]: <_system.auth.ssh.event>: <_system.auth.ssh.session.process_id> tty<~/literal/\\/>?<~/literal/s><_system.process.tty.char_device.major>"
      - "<_system.auth.ssh.event>: Read from socket failed: Connection reset by peer [preauth]"
      - "Received <_system.auth.ssh.event> from <source.ip>: <~>:  [<~>]"

  - check: $_system.auth.ssh.event=="Accepted" OR $_system.auth.ssh.event=="USER_PROCESS"
    map:
      - event.action: ssh_login
      - event.category: array_append(authentication, session)
      - event.outcome: success
      - event.type: array_append(access, allowed)

  - check: $_system.auth.ssh.event=="DEAD_PROCESS" OR $_system.auth.ssh.event=="disconnect"
    map:
      - event.action: ssh_login
      - event.category: array_append(authentication, session)
      - event.outcome: success
      - event.type: array_append(end)

  - check: $_system.auth.ssh.event=="Invalid" OR $_system.auth.ssh.event=="Failed" OR $_system.auth.ssh.event=="failures" OR $_system.auth.ssh.event=="fatal"
    map:
      - event.action: ssh_login
      - event.category: array_append(authentication, session)
      - event.outcome: failure
      - event.type: array_append(access, denied)

  - check:
      - process.name: sudo
    parse|message:
      - "<user.name> : <_system.auth.sudo.error> ; TTY=tty<~/literal/\\/>?<~/literal/s><_system.process.tty.char_device.major> ; PWD=<_system.auth.sudo.pwd> ; USER=<user.effective.name> ; COMMAND=<_system.auth.sudo.command>"
      - "<user.name> : TTY=tty<~/literal/\\/>?<~/literal/s><_system.process.tty.char_device.major> ; PWD=<_system.auth.sudo.pwd> ; USER=<user.effective.name> ; COMMAND=<_system.auth.sudo.command>"
    map:
      - event.category: array_append(process)
      - event.type: array_append(start)

  - check:
      - message: contains(pam_)
    parse|message:
      - "pam_unix\\(<~>:<~>\\): session <_system.auth.pam.session.action> for user <_system.auth.pam.foruser.name> by <_system.auth.pam.byuser.name>\\(uid=\\)"
      - "pam_unix\\(<~>:<~>\\): session <_system.auth.pam.session.action> for user <_system.auth.pam.foruser.name> by \\(uid=<user.id>\\)"
      - "pam_unix\\(<~>:<~>\\): session <_system.auth.pam.session.action> for user <_system.auth.pam.foruser.name>"
      - "pam_succeed_if\\(<~>:<~>\\): requirement <~> not met by user <user.name>"
      - "pam_unix\\(<~>:<~>\\): authentication <_system.auth.pam.session.action>; logname=<_system.auth.pam.foruser.name>?<~/literal/> uid=<user.id>?<~/literal/> euid=<user.effective.id>?<~/literal/> tty=<_system.auth.pam.tty>?<~/literal/> ruser=<_system.auth.pam.remote.user>?<~/literal/> rhost=<source.ip>?<~/literal/>  user=<user.name>?<~/literal/>"
    map:
      - event.category: array_append(authentication, session)

  - check:
      - message: contains(PAM)
    parse|message:
      - "PAM <~> more authentication <_system.auth.pam.session.action>; logname=<_system.auth.pam.foruser.name>?<~/literal/> uid=<user.id>?<~/literal/> euid=<user.effective.id>?<~/literal/> tty=<_system.auth.pam.tty>?<~/literal/> ruser=<_system.auth.pam.remote.user>?<~/literal/> rhost=<source.ip>?<~/literal/>  user=<user.name>?<~/literal/>"
    map:
      - event.category: array_append(authentication, session)

  - check:
      - _system.auth.pam.byuser.name: string_not_equal($_empty)
    map:
      - user.name: $_system.auth.pam.byuser.name
      - user.effective.name: $_system.auth.pam.foruser.name

  - check:
      - _system.auth.pam.byuser.name: not_exists()
    map:
      - user.name: $_system.auth.pam.foruser.name

  - check: $_system.auth.pam.session.action=="opened" OR $_system.auth.ssh.event=="USER_PROCESS"
    map:
      - event.type: array_append(start)

  - check: $_system.auth.pam.session.action=="closed"
    map:
      - event.type: array_append(end)

  - check: $process.name=="groupadd" OR $process.name=="useradd"
    parse|message:
      - "new group: name=<group.name>, GID=<group.id>"
      - "new user: name=<user.name>, UID=<user.id>, GID=<group.id>, home=<_system.auth.useradd.home>, shell=<_system.auth.useradd.shell>(?,<~>)"
      - "group added to <file.name>: name=<group.name>(?, GID=<group.id>)"
      - "<_system.auth.event.outcome> adding user '<user.name>'(?,<~>)"

  - check: $_system.auth.event.outcome=="failed" OR $_system.auth.pam.session.action=="failure"
    map:
      - event.outcome: failure

  - check: $process.name=="groupadd" OR $process.name=="groupdel" OR $process.name=="groupmod" OR $process.name=="useradd" OR $process.name=="userdel" OR $process.name=="usermod"
    map:
      - event.category: array_append(iam)

  - check: $process.name=="useradd" OR $process.name=="userdel" OR $process.name=="usermod"
    map:
      - event.type: array_append(user)

  - check: $process.name=="groupadd" OR $process.name=="groupdel" OR $process.name=="groupmod"
    map:
      - event.type: array_append(group)

  - check: $process.name=="groupadd" OR $process.name=="useradd"
    map:
      - event.type: array_append(creation)

  - check: $process.name=="groupdel" OR $process.name=="userdel"
    map:
      - event.type: array_append(deletion)

  - check: $process.name=="groupmod" OR $process.name=="usermod"
    map:
      - event.type: array_append(change)

  - map:
      - user.name: replace(",)
      - user.name: replace(',)
      - user.effective.name: replace(",)
      - user.effective.name: replace(',)
      - source.address: $source.ip
      - related.user: array_append($user.name, $user.effective.name)
      - related.ip: array_append($source.ip)
      - process.command_line: $_system.auth.sudo.command
      - process.tty.char_device.major: $_system.process.tty.char_device.major
      - process.working_directory: $_system.auth.sudo.pwd
